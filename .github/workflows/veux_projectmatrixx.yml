name: Build Project Matrixx Kernel (Veux)
on: 
  workflow_dispatch:
      inputs:
        ref:
          type: string
          description: reference head
          required: false
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Maximize build space
      uses: lu5ck/maximize-build-space@master
      with:
        remove-dotnet: true
        remove-android: true
        remove-haskell: true
        remove-codeql: true
        root-reserve-mb: 30000
        swap-size-mb: 24576

    - name: "Install prerequisites"
      run: |
        sudo apt-get install -y patchelf

    - name: Checkout kernel source
      uses: actions/checkout@v4
      with:
        repository: Lu5ck/kernel_xiaomi_sm6375
        ref: ${{ github.event.inputs.ref }}

    - name: "Get latest KernelSU"
      working-directory: ${{ github.workspace }}
      run: |
          # Remove KSU, if any
          sudo rm -rf "./drivers/kernelsu"
          ls drivers/

          # Download latest KSU
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main

    - name: "Build glibc 2.39"
      working-directory: ${{ github.workspace }}
      run: |
          wget -c https://ftp.gnu.org/gnu/glibc/glibc-2.39.tar.gz
          tar -zxvf glibc-2.39.tar.gz && cd glibc-2.39
          mkdir glibc-build && cd glibc-build
          ../configure --prefix=/opt/glibc
          make
          make install

    - name: "Get Neutron toolchain"
      working-directory: ${{ github.workspace }}
          mkdir toolchain && (cd toolchain; bash <(curl -s "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman") -S)

    - name: "Setup Neutron toolchain to use built glibc"
      working-directory: ${{ github.workspace }}
      run: |
          echo "Patching glibc"
          for bin in $(find /opt/glibc -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
              bin="${bin::-1}"
              echo "Patching: $bin"
              patchelf --set-rpath /opt/glibc/usr/lib --force-rpath --set-interpreter /opt/glibc/usr/lib/ld-linux-x86-64.so.2 "$bin"
          done

          echo "Patching Toolchain"
          for bin in $(find "$github.workspace/toolchain" -type f -exec file {} \; | grep 'ELF .* interpreter' | awk '{print $1}'); do
              bin="${bin::-1}"
              echo "Patching: $bin"
              patchelf --add-rpath /opt/glibc/usr/lib --force-rpath --set-interpreter /opt/glibc/usr/lib/ld-linux-x86-64.so.2 "$bin"
          done

    - name: "Build Kernel"
      working-directory: ${{ github.workspace }}
      run: |
          KERNEL_DEFCONFIG="veux_defconfig"
          KERNEL_CMDLINE="ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- O=out LLVM=1"
          export PATH=$(pwd)/toolchain/bin/:$PATH
          export ARCH=arm64
          export SUBARCH=arm64
          export DISABLE_WRAPPER=1
          make $KERNEL_CMDLINE $KERNEL_DEFCONFIG 
          make $KERNEL_CMDLINE -j$(nproc --all)
          cd AnyKernel3
          
    - name: "Build AnyKernel3"
      working-directory: ${{ github.workspace }}
      run: |
          cp out/arch/arm64/boot/Image $(pwd)/AnyKernel3
          cp out/arch/arm64/boot/dts/vendor/qcom/blair.dtb $(pwd)/AnyKernel3
          cd AnyKernel3 && mv blair.dtb dtb && zip -r9 Rashoumon_veux_ksu_$(date +"%Y-%m-%d").zip *
          outputfile="$(realpath "$(ls -d Rashoumon_veux_ksu_*)")"
          echo "outputfile=$outputfile" >> $GITHUB_OUTPUT
          
    - name: Generate Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Flashable Kernel
        path: ${{ steps.build.outputs.outputfile }}
